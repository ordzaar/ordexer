generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Indexer {
  id    String @id @default(uuid())
  block Int
}

model Block {
  id            String                @id @default(uuid())
  hash          String
  height        Int

  // A block can have multiple transactions
  transactions  Transaction[]

  @@index([height])
}
model Transaction {
  id            String                @id @default(uuid())
  block         Block                 @relation(fields: [blockId], references: [id])
  blockId       String
  txid          String
  n             Int

  // Each transaction can have multiple inputs and outputs
  vins          Output[]              @relation("Transaction_vinId")
  vouts         Output[]              @relation("Transaction_voutId")

  @@index([txid, n])
  @@unique([txid, n])
}

model Output {
  id            String                @id @default(uuid())
  addresses     String[]
  value         Int

  // Each output is the output of exactly one transaction
  vout          Transaction           @relation("Transaction_voutId", fields: [voutId], references: [id])
  voutId        String
  
  // Each output can be spent by exactly one transaction
  // vin is blank if the output is unspent
  vin           Transaction?          @relation("Transaction_vinId", fields: [vinId], references: [id])
  vinId         String?
  spent         Boolean               @default(true)
}


model Utxo {
  id            String                @id @default(uuid())
  txid          String
  n             Int
  sats          Int
  address       String
  location      String                @unique
  satRanges     Int[]                 @default([])

  // A UTXO can have multiple inscriptions
  inscriptions  Inscription[]
}

model Inscription {
  id            String                @id @default(uuid())
  utxo          Utxo                  @relation(fields: [utxoId], references: [id])
  utxoId        String
  creator       String
  owner         String?
  sat           Int
  mimeType      String
  mimeSubtype   String
  mediaType     String
  mediaCharset  String
  mediaSize     Int
  mediaContent  MediaContent?
  timestamp     Int
  height        Int
  fee           Int
  genesis       String
  number        Int
  outpoint      String
  ethereum      String
  verified      Boolean?

  @@index(height)
  @@index(number)
  @@index(outpoint)
  @@index(sat)
  @@index(mimeType)
  @@index(mimeSubtype)
  @@index(mediaType)

}

model MediaContent {
  id            String              @id @default(uuid())
  inscription   Inscription         @relation(fields: [inscriptionId], references: [id])
  inscriptionId String              @unique

  // Bytestring of the media content
  content       Bytes
}
