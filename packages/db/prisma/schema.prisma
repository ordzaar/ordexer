generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Indexer {
  id    String @id @default(uuid())
  block Int
  name  String @unique
}

model Output {
  id                String                @id @default(uuid())
  addresses         String[]
  value             Int
  scriptPubKey      Json

  // Each output is the output of exactly one transaction
  voutBlockHash     String
  voutBlockHeight   Int
  voutTxid          String
  voutTxIndex       Int
  
  // Each output can be spent by exactly one transaction
  // vin is blank if the output is unspent
  vinBlockHash      String?
  vinBlockHeight    Int?
  vinTxid           String?
  vinTxIndex        Int?
  
  spent             Boolean               @default(false)

  inscriptions      Inscription[]

  @@index([voutBlockHeight])
  @@unique([voutTxid, voutTxIndex])
  @@unique([vinTxid, vinTxIndex])
  @@index([addresses(ops:ArrayOps)], type: Gin)
  @@index([spent])
}

model Inscription {
  id                String                @id @default(uuid())
  inscriptionId     String                @unique
  output            Output?               @relation(fields: [outputId], references: [id])
  outputId          String?
  creator           String
  owner             String?
  sat               BigInt
  mimeType          String
  mimeSubtype       String?
  mediaType         String
  mediaCharset      String
  // Media Size in bytes. Int4 is sufficient, should not exceed 2GB.
  mediaSize         Int
  // Media Content is split into a separate table keep Inscription table small
  mediaContent      MediaContent          @relation(fields: [mediaContentId], references: [id])
  mediaContentId    String                @unique
  // To the engineer changing timestamp to BigInt, best of luck! Long live Ordzaar!
  timestamp         Int
  height            Int
  fee               Int
  genesis           String
  // In case the number of Ordinals exceed 2B
  number            BigInt
  sequence          BigInt
  outpoint          String
  ethereum          String?
  verified          Boolean?
  meta              Json?
  ometa             Json?

  @@index(inscriptionId, type: Hash)
  @@index(height)
  @@index(number)
  @@index(outpoint)
  @@index(sat)
  @@index(mimeType)
  @@index(mimeSubtype)
  @@index(mediaType)

}

model MediaContent {
  id                String              @id @default(uuid())
  inscription       Inscription?

  // Bytestring of the media content
  content           Bytes
}
